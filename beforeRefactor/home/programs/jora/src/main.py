import os
import argparse
import signal
import sys
from typing import Optional
from src.recognition.recognizer import CommandRecognizer
import numpy as np # type: ignore

from src.recognition.detector import VoiceDetector
from src.audio.audio_recorder import AudioRecorder
from src.audio.debug_player import DebugPlayer
from src.utils.logger import info, debug, set_debug, error, log_timing
from src.utils.config import config
from src.recognition.streamer import StreamRecognizer
from src.commands.processor import CommandProcessor

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞
jora = None

class Jora:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""

    def __init__(self, args: argparse.Namespace):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        self.args = args
        self.should_stop = False
        self.detector = VoiceDetector()
        self.recorder: Optional[AudioRecorder] = None
        self.recognizer = CommandRecognizer()
        self.stream_recognizer = StreamRecognizer()
        self.command_processor = CommandProcessor()
        self.command_processor.set_stream_recognizer(self.stream_recognizer)

    def start_recording(self, initial_audio: Optional[np.ndarray] = None):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏"""
            if not self.recorder:
                self.recorder = AudioRecorder()
                if not self.recorder.start_recording(initial_audio):
                    error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
                    self.recorder = None

    def process_audio(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        if self.command_processor.is_dictating:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∫—Ç–æ–≤–∫—É
            self.stream_recognizer.recognize_stream()
            self.command_processor.is_dictating = False
            info("\n‚úÖ –î–∏–∫—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        state = self.detector.process_audio()
        if state:
            if state['type'] == 'start':
                self.start_recording(state.get('audio'))
            elif state['type'] == 'end':
                self.stop_recording()

        if self.recorder:
            self.recorder.process()

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏"""
        if self.recorder:
            if audio_file := self.recorder.stop_recording():
                try:
                    if text := self.recognizer.recognize_command(audio_file):
                        info(f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
                        self.command_processor.process(text)
                    else:
                        info("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

                    if config.DEBUG:
                        DebugPlayer.play_file(audio_file)

                finally:
                    try:
                        os.unlink(audio_file)
                    except Exception as e:
                        error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

                    self.recorder.cleanup()
                    self.recorder = None

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""

        while not self.should_stop:
            self.process_audio()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        self.should_stop = True
        if self.recorder:
            self.stop_recording()
        self.detector.cleanup()

    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
        self.stop()

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='–ñ–æ—Ä–∞ - –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫')
    parser.add_argument('--debug', '-d', action='store_true', help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('--sensitivity', '-s', type=float, default=config.vad.SENSITIVITY,
                      help='–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ—á–∏ (0.0 - 1.0)')
    parser.add_argument('--min-silence', '-m', type=int, default=config.vad.MIN_SILENCE_MS,
                      help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã (–º—Å)')
    parser.add_argument('--speech-pad', '-p', type=int, default=config.vad.SPEECH_PAD_MS,
                      help='Padding —Ä–µ—á–∏ (–º—Å)')
    return parser.parse_args()

def signal_handler(sig, frame):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ Ctrl+C"""
    global jora
    if jora:
        jora.stop()
    info("\n–ü–æ–∫–∞, –±—Ä–∞—Ç–∞–Ω! –ó–∞–≤–µ—Ä—à–∞—é—Å—å...")
    sys.exit(0)

def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_envs = ['YANDEX_FOLDER_ID', 'YANDEX_OAUTH_TOKEN', 'YANDEX_API_KEY']
    missing = [env for env in required_envs if not os.getenv(env)]

    if missing:
        error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        error("–ü—Ä–æ–≤–µ—Ä—å shell.nix!")
        return False

    return True

def main():
    args = parse_args()

    if args.debug:
        config.enable_debug()
        set_debug(True)
        debug("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

    if not check_environment():
        sys.exit(1)

    info("üé§ –ó–∞–ø—É—Å–∫–∞—é –ñ–æ—Ä—É...")

    global jora
    jora = Jora(args)
    signal.signal(signal.SIGINT, signal_handler)

    log_timing("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    try:
        info("üëÇ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—ã...")
        jora.run()
    except Exception as e:
        error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if jora:
            jora.stop()

if __name__ == "__main__":
    main()
