import os
import argparse
import signal
import sys
from typing import Optional
import numpy as np # type: ignore

from src.recognition.detector import VoiceDetector
from src.audio.audio_recorder import AudioRecorder
from src.audio.debug_player import DebugPlayer
from src.utils.logger import info, debug, set_debug, error
from src.utils.config import config

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞
jora = None

class Jora:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""

    def __init__(self, args: argparse.Namespace):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        self.args = args
        self.should_stop = False

        # –î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏
        self.detector = VoiceDetector(
            sensitivity=args.sensitivity,
            min_silence_ms=args.min_silence,
            speech_pad_ms=args.speech_pad
        )

        # Recorder —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏
        self.recorder: Optional[AudioRecorder] = None

    def start_recording(self, initial_audio: Optional[np.ndarray] = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏"""
        if not self.recorder:
            self.recorder = AudioRecorder()
            if not self.recorder.start_recording(initial_audio):
                error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
                self.recorder = None
            else:
                info("üé§ –ù–∞—á–∞–ª–æ —Ä–µ—á–∏")

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Ä–µ—á–∏"""
        if self.recorder:
            if audio_file := self.recorder.stop_recording():
                debug("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                info("üîá –ö–æ–Ω–µ—Ü —Ä–µ—á–∏")

                # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                if config.DEBUG:
                    DebugPlayer.play_file(audio_file)

                # TODO: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ

            self.recorder.cleanup()
            self.recorder = None

    def process_audio(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—á–∏
        state = self.detector.process_audio()

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state:
            debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state['type']}")

            # –ù–∞—á–∞–ª–æ —Ä–µ—á–∏
            if state['type'] == 'start':
                debug("üé§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å")
                self.start_recording(state.get('audio'))

            # –ö–æ–Ω–µ—Ü —Ä–µ—á–∏
            elif state['type'] == 'end':
                debug("üîá –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å")
                self.stop_recording()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
        if self.recorder:
            self.recorder.process()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        info("–ü–æ–≥–Ω–∞–ª–∏, –±—Ä–∞—Ç–∞–Ω! –°–ª—É—à–∞—é...")

        while not self.should_stop:
            self.process_audio()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        self.should_stop = True
        if self.recorder:
            self.stop_recording()  # –£–±—Ä–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä current_sample
        self.detector.cleanup()

    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
        self.stop()

def parse_args() -> argparse.Namespace:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ñ–æ—Ä–∞ - –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫')
    parser.add_argument(
        '--debug', '-d',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )
    parser.add_argument(
        '--sensitivity', '-s',
        type=float,
        default=0.5,
        help='–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ä–µ—á–∏ (0.0 - 1.0)'
    )
    parser.add_argument(
        '--min-silence', '-m',
        type=int,
        default=100,
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã (–º—Å)'
    )
    parser.add_argument(
        '--speech-pad', '-p',
        type=int,
        default=30,
        help='Padding —Ä–µ—á–∏ (–º—Å)'
    )
    return parser.parse_args()

def signal_handler(sig, frame):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ Ctrl+C"""
    global jora
    if jora:
        jora.stop()
    info("\n–ü–æ–∫–∞, –±—Ä–∞—Ç–∞–Ω! –ó–∞–≤–µ—Ä—à–∞—é—Å—å...")
    sys.exit(0)

def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_envs = [
        'YANDEX_FOLDER_ID',
        'YANDEX_OAUTH_TOKEN',
        'YANDEX_API_KEY'
    ]

    missing = [env for env in required_envs if not os.getenv(env)]

    if missing:
        error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        error("–ü—Ä–æ–≤–µ—Ä—å shell.nix!")
        return False

    debug("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def main():
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_args()

    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.debug:
        config.enable_debug()
        set_debug(True)
        debug("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞
    global jora
    jora = Jora(args)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        jora.run()
    except Exception as e:
        error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if jora:
            jora.stop()

if __name__ == "__main__":
    main()
