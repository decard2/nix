import os
import json
import subprocess
from typing import Callable, List, Dict, Optional

class Command:
    def __init__(self, keywords: List[str], handler: Callable, description: str):
        self.keywords = keywords
        self.handler = handler
        self.description = description

    def matches(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–æ–º–∞–Ω–¥—ã"""
        return any(keyword in text.lower() for keyword in self.keywords)

    def execute(self, text: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        self.handler(text)

class CommandProcessor:
    def __init__(self):
        self.commands: Dict[str, Command] = {}
        self.is_dictating = False
        self.stream_recognizer = None
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π
        self.word_forms = {
            "telegram": ["—Ç–µ–ª–µ–≥–∞", "—Ç–µ–ª–µ–≥—Ä–∞–º", "telegram", "—Ç–µ–ª–µ–≥—É", "—Ç–µ–ª–µ–≥–∏", "—Ç–µ–ª–µ–≥–µ"],
            "term": ["—Ç–µ—Ä–º–∏–Ω–∞–ª", "–∫–æ–Ω—Å–æ–ª—å", "—Ç–µ—Ä–º–∏–Ω–∞–ª–∞", "–∫–æ–Ω—Å–æ–ª–∏", "—à–µ–ª", "—à–µ–ª–ª"],
            "btop": ["–ø—Ä–æ—Ü–µ—Å—Å—ã", "–Ω–∞–≥—Ä—É–∑–∫–∞", "–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–Ω–∞–≥—Ä—É–∑–∫–∏", "–º–æ–Ω–∏—Ç–æ—Ä"],
            "editor": ["—Ä–µ–¥–∞–∫—Ç–æ—Ä", "–∫–æ–¥–µ—Ä", "–∏–¥—ç", "—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", "–∫–æ–¥–µ—Ä–∞"],
            "browser": ["–±—Ä–∞—É–∑–µ—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–±—Ä–∞—É–∑–µ—Ä–∞", "firefox", "—Ñ–∞–µ—Ä—Ñ–æ–∫—Å"],
            "jora": ["–∂–æ—Ä–∞", "–∂–æ—Ä—É", "–∂–æ—Ä—ã", "–∂–æ—Ä–µ", "–ø–æ–º–æ—â–Ω–∏–∫", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"]
        }
        self._setup_commands()

    def _setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥–∞ –¥–∏–∫—Ç–æ–≤–∫–∏
        self.add_command(
            "dictate",
            ["–¥–∏–∫—Ç—É–π", "–∑–∞–ø–∏—à–∏", "–∑–∞–ø–∏—Å—ã–≤–∞–π", "–ø–æ–¥ –¥–∏–∫—Ç–æ–≤–∫—É", "–Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å"],
            self._handle_dictation,
            "–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –¥–∏–∫—Ç–æ–≤–∫–∏"
        )

        # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.add_command(
            "close",
            ["–∑–∞–∫—Ä—ã—Ç—å", "–≤—ã–∫–ª—é—á–∏—Ç—å"],
            lambda text: self._handle_system_command("hyprctl dispatch killactive"),
            "–ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"
        )

        self.add_command(
            "reboot",
            ["–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏", "—Ä–µ–±—É—Ç", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "—Ä–µ—Å—Ç–∞—Ä—Ç"],
            lambda text: self._handle_reboot(text),
            "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        )

    def _extract_number(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        words = text.split()
        for word in words:
            if word.isdigit() and 1 <= int(word) <= 9:
                return word
        return None

    def _find_app_in_text(self, text: str, app_forms: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å —É—á–µ—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–π"""
        return any(form in text.lower() for form in app_forms)

    def _handle_reboot(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" in text.lower():
            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–∏—Å—Ç–µ–º—É...")
            self._handle_system_command("systemctl reboot")
        else:
            print("‚ö†Ô∏è –î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞–∂–∏ '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'")

    def _handle_system_command(self, command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        try:
            os.system(command)
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _handle_scratchpad_app(self, text: str, app_name: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ scratchpad:
        1. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ scratchpad
        """
        workspace_num = self._extract_number(text)

        if workspace_num:
            print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
            os.system(f"hyprctl dispatch workspace {workspace_num}")

        print(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é {app_name} –≤ scratchpad")
        os.system(f"hyprctl dispatch togglespecialworkspace {app_name}")

    def _handle_fixed_workspace_app(self, text: str, app_name: str, default_workspace: str, launch_command: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º:
        1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª (—É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
        2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
        3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–æ–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        """
        workspace_num = self._extract_number(text) or default_workspace

        print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
        os.system(f"hyprctl dispatch workspace {workspace_num}")

        if not self._check_workspace_exists(int(workspace_num)):
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {app_name}")
            os.system(f"{launch_command} &")
        else:
            print(f"‚ú® {app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

    def _check_workspace_exists(self, workspace_num: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
        try:
            result = subprocess.run(['hyprctl', 'clients', '-j'], capture_output=True, text=True)
            clients = json.loads(result.stdout)
            return any(client.get('workspace', {}).get('id') == workspace_num for client in clients)
        except:
            return False

    def _handle_dictation(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–∏–∫—Ç–æ–≤–∫–∏"""
        print("üìù –ü–æ–≥–Ω–∞–ª–∏ –¥–∏–∫—Ç–æ–≤–∞—Ç—å! (–°–∫–∞–∂–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
        if self.stream_recognizer:
            self.is_dictating = True
            print("‚úÖ –ú–æ–∂–Ω–æ –¥–∏–∫—Ç–æ–≤–∞—Ç—å!")

    def process(self, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–∏–∫—Ç–æ–≤–∫–∞, –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞)
        for command in self.commands.values():
            if command.matches(text):
                command.execute(text)
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scratchpad –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self._find_app_in_text(text, self.word_forms["telegram"]):
            self._handle_scratchpad_app(text, "telegram")
            return True

        if self._find_app_in_text(text, self.word_forms["term"]):
            self._handle_scratchpad_app(text, "term")
            return True

        if self._find_app_in_text(text, self.word_forms["btop"]):
            self._handle_scratchpad_app(text, "btop")
            return True

        if self._find_app_in_text(text, self.word_forms["jora"]):
            self._handle_scratchpad_app(text, "jora")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º
        if self._find_app_in_text(text, self.word_forms["editor"]):
            self._handle_fixed_workspace_app(text, "Zed", "3", "zeditor")
            return True

        if self._find_app_in_text(text, self.word_forms["browser"]):
            self._handle_fixed_workspace_app(text, "Firefox", "4", "firefox")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        workspace_num = self._extract_number(text)
        if workspace_num:
            print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
            os.system(f"hyprctl dispatch workspace {workspace_num}")
            return True

        return False

    def add_command(self, name: str, keywords: List[str], handler: Callable, description: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        self.commands[name] = Command(keywords, handler, description)

    def set_stream_recognizer(self, recognizer):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ stream_recognizer"""
        self.stream_recognizer = recognizer
