from typing import Optional, Dict, List, Callable
from src.recognition.streamer import StreamRecognizer
from src.utils.logger import info
from src.commands.handlers import CommandHandlers

class Command:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã"""
    def __init__(self, keywords: List[str], handler: Callable, description: str):
        self.keywords = keywords
        self.handler = handler
        self.description = description

    def matches(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        return any(keyword in text.lower() for keyword in self.keywords)

    def execute(self, text: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        self.handler(text)

class CommandProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""

    def __init__(self):
        self.commands: Dict[str, Command] = {}
        self.is_dictating = False
        self.stream_recognizer: Optional[StreamRecognizer] = None

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π
        self.word_forms = {
            "telegram": ["—Ç–µ–ª–µ–≥–∞", "—Ç–µ–ª–µ–≥—Ä–∞–º", "telegram", "—Ç–µ–ª–µ–≥—É", "—Ç–µ–ª–µ–≥–∏", "—Ç–µ–ª–µ–≥–µ"],
            "term": ["—Ç–µ—Ä–º–∏–Ω–∞–ª", "–∫–æ–Ω—Å–æ–ª—å", "—Ç–µ—Ä–º–∏–Ω–∞–ª–∞", "–∫–æ–Ω—Å–æ–ª–∏", "—à–µ–ª", "—à–µ–ª–ª"],
            "btop": ["–ø—Ä–æ—Ü–µ—Å—Å—ã", "–Ω–∞–≥—Ä—É–∑–∫–∞", "–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–Ω–∞–≥—Ä—É–∑–∫–∏", "–º–æ–Ω–∏—Ç–æ—Ä"],
            "editor": ["—Ä–µ–¥–∞–∫—Ç–æ—Ä", "–∫–æ–¥–µ—Ä", "–∏–¥—ç", "—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", "–∫–æ–¥–µ—Ä–∞"],
            "browser": ["–±—Ä–∞—É–∑–µ—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–±—Ä–∞—É–∑–µ—Ä–∞", "firefox", "—Ñ–∞–µ—Ä—Ñ–æ–∫—Å"],
            "jora": ["–∂–æ—Ä–∞", "–∂–æ—Ä—É", "–∂–æ—Ä—ã", "–∂–æ—Ä–µ", "–ø–æ–º–æ—â–Ω–∏–∫", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"]
        }

        self._setup_commands()

    def _setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        # –î–∏–∫—Ç–æ–≤–∫–∞
        self.add_command(
            "dictate",
            ["–¥–∏–∫—Ç—É–π", "–∑–∞–ø–∏—à–∏", "–∑–∞–ø–∏—Å—ã–≤–∞–π", "–ø–æ–¥ –¥–∏–∫—Ç–æ–≤–∫—É", "–Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å"],
            self._handle_dictation,
            "–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –¥–∏–∫—Ç–æ–≤–∫–∏"
        )

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.add_command(
            "close",
            ["–∑–∞–∫—Ä—ã—Ç—å", "–≤—ã–∫–ª—é—á–∏—Ç—å"],
            lambda text: CommandHandlers.handle_system_command(
                "hyprctl dispatch killactive"
            ),
            "–ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"
        )

        self.add_command(
            "reboot",
            ["–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"],
            CommandHandlers.handle_reboot,
            "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        )

    def _find_app_in_text(self, text: str, app_forms: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å —É—á–µ—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–π"""
        return any(form in text.lower() for form in app_forms)

    def _handle_dictation(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–∏–∫—Ç–æ–≤–∫–∏"""
        info("üìù –ü–æ–≥–Ω–∞–ª–∏ –¥–∏–∫—Ç–æ–≤–∞—Ç—å! (–°–∫–∞–∂–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)")
        if self.stream_recognizer:
            self.is_dictating = True
            info("‚úÖ –ú–æ–∂–Ω–æ –¥–∏–∫—Ç–æ–≤–∞—Ç—å!")

    def process(self, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for command in self.commands.values():
            if command.matches(text):
                command.execute(text)
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scratchpad –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self._find_app_in_text(text, self.word_forms["telegram"]):
            CommandHandlers.handle_scratchpad_app(text, "telegram")
            return True

        if self._find_app_in_text(text, self.word_forms["term"]):
            CommandHandlers.handle_scratchpad_app(text, "term")
            return True

        if self._find_app_in_text(text, self.word_forms["btop"]):
            CommandHandlers.handle_scratchpad_app(text, "btop")
            return True

        if self._find_app_in_text(text, self.word_forms["jora"]):
            CommandHandlers.handle_scratchpad_app(text, "jora")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º
        if self._find_app_in_text(text, self.word_forms["editor"]):
            CommandHandlers.handle_fixed_workspace_app(
                text, "Zed", "3", "zeditor"
            )
            return True

        if self._find_app_in_text(text, self.word_forms["browser"]):
            CommandHandlers.handle_fixed_workspace_app(
                text, "Firefox", "4", "firefox"
            )
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        CommandHandlers.handle_workspace(text)
        return True

    def add_command(self, name: str, keywords: List[str],
                   handler: Callable, description: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        self.commands[name] = Command(keywords, handler, description)

    def set_stream_recognizer(self, recognizer: StreamRecognizer):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è –ø–æ—Ç–æ–∫–∞"""
        self.stream_recognizer = recognizer
