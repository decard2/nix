import os
import json
import subprocess
from typing import Optional
from src.utils.logger import info

class CommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""

    @staticmethod
    def _extract_number(text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        words = text.split()
        for word in words:
            if word.isdigit() and 1 <= int(word) <= 9:
                return word
        return None

    @staticmethod
    def _check_workspace_exists(workspace_num: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
        try:
            result = subprocess.run(['hyprctl', 'clients', '-j'],
                                  capture_output=True, text=True)
            clients = json.loads(result.stdout)
            return any(client.get('workspace', {}).get('id') == workspace_num
                      for client in clients)
        except:
            return False

    @staticmethod
    def safe_launch(command: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –æ—Ç–≤—è–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        return f"nohup {command} >/dev/null 2>&1 &"

    @staticmethod
    def handle_system_command(command: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        try:
            if any(app in command for app in ['firefox', 'zeditor', 'telegram-desktop']):
                os.system(CommandHandlers.safe_launch(command))
            else:
                os.system(command)
            info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}")
        except Exception as e:
            info(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

    @classmethod
    def handle_scratchpad_app(cls, text: str, app_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ scratchpad"""
        workspace_num = cls._extract_number(text)

        if workspace_num:
            info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
            os.system(f"hyprctl dispatch workspace {workspace_num}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if app_name == "telegram":
            os.system(f"pgrep telegram-desktop || {cls.safe_launch('telegram-desktop')}")

        info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é {app_name} –≤ scratchpad")
        os.system(f"hyprctl dispatch togglespecialworkspace {app_name}")

    @classmethod
    def handle_fixed_workspace_app(cls, text: str, app_name: str,
                                 default_workspace: str, launch_command: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º"""
        workspace_num = cls._extract_number(text) or default_workspace

        info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
        os.system(f"hyprctl dispatch workspace {workspace_num}")

        if not cls._check_workspace_exists(int(workspace_num)):
            info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {app_name}")
            os.system(cls.safe_launch(launch_command))
        else:
            info(f"‚ú® {app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

    @classmethod
    def handle_reboot(cls, text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" in text.lower():
            info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–∏—Å—Ç–µ–º—É...")
            cls.handle_system_command("systemctl reboot")
        else:
            info("‚ö†Ô∏è –î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞–∂–∏ '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'")

    @staticmethod
    def handle_workspace(text: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"""
        workspace_num = CommandHandlers._extract_number(text)
        if workspace_num:
            info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª {workspace_num}")
            os.system(f"hyprctl dispatch workspace {workspace_num}")
