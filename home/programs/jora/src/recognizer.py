import pyaudio # type: ignore
import wave
import urllib.request
import json
import os
import tempfile
import subprocess
from datetime import datetime, timedelta

class SpeechRecognizer:
    def __init__(self):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
        self.FORMAT = pyaudio.paInt16
        self.CHANNELS = 1
        self.RATE = 16000
        self.CHUNK = 1024

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–∏—à–∏–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ (–≤ —á–∞–Ω–∫–∞—Ö)
        self.MAX_SILENCE_CHUNKS = int(self.RATE / self.CHUNK * 0.5)  # 0.5 —Å–µ–∫

        self.audio = pyaudio.PyAudio()

        # –Ø–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω—ã
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.oauth_token = os.getenv("YANDEX_OAUTH_TOKEN")
        self.iam_token = None
        self.token_expires = None

        # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
        self._update_iam_token()

    def _update_iam_token(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç IAM —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        if (self.iam_token is None or
            self.token_expires is None or
            datetime.now() >= self.token_expires):

            print("üîÑ –û–±–Ω–æ–≤–ª—è—é IAM —Ç–æ–∫–µ–Ω...")

            url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
            data = json.dumps({"yandexPassportOauthToken": self.oauth_token}).encode('utf-8')

            request = urllib.request.Request(
                url,
                data=data,
                headers={'Content-Type': 'application/json'}
            )

            try:
                response = urllib.request.urlopen(request)
                decoded = json.loads(response.read().decode('utf-8'))

                self.iam_token = decoded.get('iamToken')
                self.token_expires = datetime.now() + timedelta(hours=11)

                print("‚úÖ IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {e}")
                raise

    def record_until_silence(self, detector) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ª—ã—à–∏—Ç —Ä–µ—á—å"""
        temp_wav = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
        temp_ogg = tempfile.NamedTemporaryFile(suffix=".ogg", delete=False)

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
            stream = self.audio.open(
                format=self.FORMAT,
                channels=self.CHANNELS,
                rate=self.RATE,
                input=True,
                frames_per_buffer=self.CHUNK
            )

            print("üéôÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é...")
            frames = []
            silence_chunks = 0

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫–∞ —Å–ª—ã—à–∏–º —Ä–µ—á—å
            while True:
                data = stream.read(self.CHUNK)
                frames.append(data)

                if not detector.is_speech():
                    silence_chunks += 1
                    if silence_chunks >= self.MAX_SILENCE_CHUNKS:
                        break
                else:
                    silence_chunks = 0

            print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
            if len(frames) < 3:  # –º–µ–Ω—å—à–µ 3 —á–∞–Ω–∫–æ–≤ —Å—á–∏—Ç–∞–µ–º —à—É–º–æ–º
                return ""

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
            stream.stop_stream()
            stream.close()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV
            with wave.open(temp_wav.name, 'wb') as wf:
                wf.setnchannels(self.CHANNELS)
                wf.setsampwidth(self.audio.get_sample_size(self.FORMAT))
                wf.setframerate(self.RATE)
                wf.writeframes(b''.join(frames))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG
            subprocess.run([
                'opusenc',
                '--bitrate', '48',
                temp_wav.name,
                temp_ogg.name
            ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            with open(temp_ogg.name, "rb") as f:
                data = f.read()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._update_iam_token()

            params = "&".join([
                "topic=general",
                f"folderId={self.folder_id}",
                "lang=ru-RU"
            ])

            url = urllib.request.Request(
                f"https://stt.api.cloud.yandex.net/speech/v1/stt:recognize?{params}",
                data=data
            )
            url.add_header("Authorization", f"Bearer {self.iam_token}")

            response = urllib.request.urlopen(url).read().decode('UTF-8')
            decoded = json.loads(response)

            return decoded.get("result", "")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return ""

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.unlink(temp_wav.name)
            os.unlink(temp_ogg.name)

    def __del__(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        self.audio.terminate()
