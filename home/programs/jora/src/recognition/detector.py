import time
import numpy as np# type: ignore
from typing import Optional, Dict, Any, List
from silero_vad import load_silero_vad, VADIterator  # type: ignore

from src.utils.logger import debug, error
from src.utils.config import config
from src.audio.audio_stream import VADStream

class VoiceDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞–∑–µ Silero VAD"""

    def __init__(self,
                 sensitivity: float = 0.5,
                 min_silence_ms: int = 100,
                 speech_pad_ms: int = 30):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        start_time = time.time()

        self.sensitivity = sensitivity
        self.min_silence_ms = min_silence_ms
        self.speech_pad_ms = speech_pad_ms

        # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –≤ —Å—ç–º–ø–ª–∞—Ö (speech_pad + –∑–∞–ø–∞—Å)
        self.buffer_size = int(config.vad.RATE * (speech_pad_ms + 50) / 1000)
        self.audio_buffer: List[np.ndarray] = []

        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ—á–∏
        self.is_speech_active = False

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è VAD
        self.stream = VADStream()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º VAD –º–æ–¥–µ–ª—å
        debug("–ó–∞–≥—Ä—É–∑–∫–∞ Silero VAD –º–æ–¥–µ–ª–∏...")
        model_start = time.time()
        self.model = load_silero_vad(onnx=True)
        debug(f"‚è±Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ VAD –º–æ–¥–µ–ª–∏: {(time.time() - model_start)*1000:.1f}ms")

        # –°–æ–∑–¥–∞–µ–º VAD –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        self.vad_iterator = VADIterator(
            model=self.model,
            threshold=self.sensitivity,
            sampling_rate=config.vad.RATE,
            min_silence_duration_ms=min_silence_ms,
            speech_pad_ms=speech_pad_ms
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        debug("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞:")
        debug(f"   üìä –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sensitivity}")
        debug(f"   üîá –ú–∏–Ω. —Ç–∏—à–∏–Ω–∞: {min_silence_ms}ms")
        debug(f"   üìè Padding —Ä–µ—á–∏: {speech_pad_ms}ms")
        debug(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {config.vad.RATE} Hz")
        debug(f"   üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {config.vad.CHUNK} samples")
        debug(f"   ‚è±Ô∏è –î–ª–∏–Ω–∞ —á–∞–Ω–∫–∞: {config.vad.CHUNK/config.vad.RATE*1000:.1f} ms")
        debug(f"   üíæ –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {self.buffer_size} samples ({self.buffer_size/config.vad.RATE*1000:.1f} ms)")

        debug(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {(time.time() - start_time)*1000:.1f}ms")

    def process_audio(self) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            audio, overflow = self.stream.read()
            if overflow:
                return None

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            self.audio_buffer.append(audio)

            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            while len(self.audio_buffer) * len(audio) > self.buffer_size:
                self.audio_buffer.pop(0)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç VAD
            speech_dict = self.vad_iterator(audio)

            if speech_dict is not None:
                debug(f"VAD –≤–µ—Ä–Ω—É–ª: {speech_dict}")

                if 'start' in speech_dict and not self.is_speech_active:
                    self.is_speech_active = True
                    debug("‚≠ê –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª–æ —Ä–µ—á–∏")
                    return {
                        'type': 'start',
                        'audio': np.concatenate(self.audio_buffer)
                    }
                elif 'end' in speech_dict and self.is_speech_active:
                    self.is_speech_active = False
                    debug("‚≠ê –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω–µ—Ü —Ä–µ—á–∏")
                    return {
                        'type': 'end',
                        'audio': audio  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
                    }

            return None

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
            return None

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.vad_iterator.reset_states()
        self.stream.cleanup()
        self.audio_buffer.clear()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        self.cleanup()
